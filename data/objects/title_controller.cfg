//Object which controls the game's main title screen.
{
	id: "title_controller",
	prototype: ["title_controller_base"],

	properties: {
		// Function which presents the title screen's main UI.
		// It should construct all the UI elements the title screen
		// has to offer.
		_present_ui: "def() ->commands
			spawn('button_controller', {
				text: 'Play vs AI',
				mid_x: level_width/2,
				y2: level_height - lib.gui.py(6),
				_font_size: lib.gui.py(14),
				on_click: me.play_single_player_game,
			}, [
			])
		",

		play_single_player_game: "def() ->commands
			execute(me, [
				//This is the message we use to setup the game.
				//This message gets handled by the server in
				//class tbs_game's create() function to construct
				//the actual game state. Any custom arguments to the
				//game / state / etc can be included here.
				let msg = {
					type: 'create_game',
					users: [{
						user: lib.tbs.local_username,
						session_id: 1,
					}, {
						user: 'CPU',
						bot_type: 'basic',
						bot: true,
						session_id: 2,
					}],
				};

				//Create a machine-local server and send it the request
				let client = tbs_internal_client();
				let request = tbs_blocking_request(client, msg);

				//We send the request to start the game and also start
				//doing a graphical transition effect at the same time.
				//These calls will block until both are complete.
				[
					request.block(),
					transition_effect_blocking('zoom_in'),
				];

				if((not request.response is map) or (map<-request.response).type != 'game_created', [
					//TODO: Creating a local game should rarely fail
					//but if it does we should have better error handling here.
					debug(['ERROR CREATING GAME', request.response]),
					cancel(),
				]);

				//Now the game is starting we create the game_controller
				//object which controls the game itself. We remove all
				//the titlescreen objects and add the game_controller
				//so the game can start.
				[
					map(level.chars, remove_object(value)),
					add_object(controller),
				]

				where controller = object_playable('game_controller', 0, 0, 0, {
					_mm_client_state: _mm_client_state,
					session_id: 1,
					return_from_game: me.return_from_game,
					rematch: def(bool result, null|class game_state state) ->commands (map(level.chars, remove_object(value)); add_object(me); me.play_single_player_game()),
				})

			])
		",

		//Function to join an online game.
		join_game: "def(string host, int port, int|null session_id_override=null) ->commands
		transition_effect_blocking('zoom_in');

		[
			map(level.chars, remove_object(value)),
			add_object(controller),
		]
		where controller = object_playable('game_controller', 0, 0, 0, {
			_mm_client_state: _mm_client_state,
			session_id: session_id_override or _mm_client_state.session_id,
			return_from_game: me.return_from_game,
			game_server_address: host,
			game_server_port: port,
		})
		",
	},

	events: {
	},
}
