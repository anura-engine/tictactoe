{
	id: "game_controller",
	prototype: ["game_controller_base"],

	properties: {

		
		location_clicked: "def(Loc loc) ->commands
			if(loc not in state.board,
				send({
					type: 'move',
					loc: loc,
				}, {
					predict: true
				})
			)
		",

		present_game_state: "def() ->commands
			turn_label.set_text([if(state.game_over, 'Game Over', state.nplayer = state.current_player, 'Your Turn', 'Their Turn')]);
			map(state.board,
				if(not existing,
					spawn('xo', {
						mid_x: board.x + board.img_w/6 + key[0]*board.img_w/3,
						mid_y: board.y + board.img_h/6 + key[1]*board.img_h/3,
						loc: key,
						player: value,
					})
				)
				where existing = find(level.chars, value is obj xo and value.loc = key and value.player = context.value)
			)
		",

		present_animation_blocking: "def(class animation anim) ->commands
		if(anim is class animation.move,
		   present_move_animation_blocking(anim),
		   anim is class animation.win,
		   present_win_animation_blocking(anim)
		)
		",

		present_move_animation_blocking: "def(class animation.move anim) ->commands
			spawn('xo', {
				mid_x: board.x + board.img_w/6 + anim.loc[0]*board.img_w/3,
				mid_y: board.y + board.img_h/6 + anim.loc[1]*board.img_h/3,
				loc: anim.loc,
				player: anim.player,
				draw_anim: 0.0,
			}, [
				animate(child, {
					draw_anim: 1.0,
				}, {
					duration: 30,
					sleep: true,
				})
			])
		",

		present_win_animation_blocking: "def(class animation.win anim) ->commands
			set(board.winning_range, anim.range);
			animate(board, {
				winning_anim: 1.0,
			}, {
				duration: 60,
				sleep: true,
			})
		",

		_board: { type: "null|obj board" },
		board: "obj board <- _board",

		_turn_label: { type: "null|obj label" },
		turn_label: "obj label <- _turn_label",
	},

	events: {
		create: "[
			spawn('label', {
				_text: [''],
				_font_size: lib.gui.py(16),
				x: lib.gui.py(400),
				y: lib.gui.py(400),
			}, [
				set(_turn_label, child),
			]),

			spawn('board', {
				mid_x: level_width / 2,
				mid_y: level_height / 2,
				controller: me,
			}, [
				set(_board, child),
			])
		]",
	},
}
