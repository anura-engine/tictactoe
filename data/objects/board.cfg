{
	id: "board",
	is_strict: true,

	properties: {
		//A value between [0.0,1.0] which tells us how far we are in
		//drawing the board. We can animate this value to make the
		//board draw like someone is drawing it progressively.
		draw_anim: { type: "decimal", default: 0.0, change: "render()" },

		//if not null this means someone has won and there is a range of
		//winning locations a line should be drawn across.
		winning_range: { type: "null|[Loc]" },

		//A value between [0.0,1.0] which tells us how far we are in
		//drawing the line across the winning range.
		winning_anim: { type: "decimal", default: 0.0, change: "render()" },

		controller: { type: "obj game_controller" },

		//Function which draws the board.
		render: "def() ->commands
			set(animation, lib.gui.render_frame(c, ww, hh, [

				if(cell_mouseover != null, [
					c.set_source_color('black'),
					c.rectangle(cell_mouseover[0]*ww/3, cell_mouseover[1]*hh/3, ww/3, hh/3),
					c.fill(),
				]),

				c.set_source_color('white'),
				c.set_line_width(ww/50.0),

				c.move_to(ww/3, 0),
				c.line_to(ww/3, hh * clamp(draw_anim/0.25, 0.0, 1.0)),
				c.stroke(),

				c.move_to(2*ww/3, 0),
				c.line_to(2*ww/3, hh * clamp((draw_anim-0.25)/0.25, 0.0, 1.0)),
				c.stroke(),

				c.move_to(0, hh/3),
				c.line_to(ww * clamp((draw_anim-0.5)/0.25, 0.0, 1.0), hh/3),
				c.stroke(),

				c.move_to(0, 2*hh/3),
				c.line_to(ww * clamp((draw_anim-0.75)/0.25, 0.0, 1.0), 2*hh/3),
				c.stroke(),

				if(winning_range != null,
				[
					c.set_line_width(ww/30.0),

					c.move_to(start_x - delta_x*0.1, start_y - delta_y*0.1),
					c.line_to(start_x + delta_x*winning_anim*1.1, start_y + delta_y*winning_anim*1.1),
					c.stroke(),
				]
					where delta_x = end_x - start_x
					where delta_y = end_y - start_y
					where start_x = ww/6 + winning_range[0][0]*(ww/3)
					where start_y = hh/6 + winning_range[0][1]*(hh/3)
					where end_x = ww/6 + back_or_die(winning_range)[0]*(ww/3)
					where end_y = hh/6 + back_or_die(winning_range)[1]*(hh/3)
				)
			])
			where ww = lib.gui.py(400)
			where hh = lib.gui.py(400)
			where c = canvas()
			)
		",

		cell_mouseover: { type: "null|Loc", set: "if(value != _data, set(_data, value); render())" },
		get_cell_mouseover: "def() ->null|Loc
		if(p[0] > x and p[0] < x + img_w and p[1] > y and p[1] < y + img_h,
			[xpos,ypos]
			where xpos = (p[0] - x)/(img_w/3)
			where ypos = (p[1] - y)/(img_h/3)
		)
			where p = lib.gui.mouse_pos(level)
		",
	},

	events: {
		//when first created we want to do an animation of drawing
		//the board.
		create: "render(); animate(me, { draw_anim: 1.0 }, { duration: 60 })",
		process: "set(cell_mouseover, get_cell_mouseover())",
		click: "if(cell_mouseover != null, controller.location_clicked(cell_mouseover))",
	},
}
